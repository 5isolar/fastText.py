# fastText C++ interface
from interface cimport FastTextModel

# Cython
from libcpp.string cimport string

# Python module
import os
from builtins import bytes
from model import SupervisedModel

# This Python class wrap the C++ class FastText from interface.pxd
# so it can be accessed via Python
# http://cython.readthedocs.io/en/latest/src/userguide/wrapping_CPlusPlus.html
cdef class FastTextWrapper:
    cdef FastTextModel fm

    def __cinit__(self):
        self.fm = FastTextModel()
    
    def load_model(self, filename):
        self.fm.loadModel(filename)

    @property
    def minCount(self):
        return self.fm.minCount

    @property
    def minCountLabel(self):
        return self.fm.minCountLabel

    @property
    def wordNgrams(self):
        return self.fm.wordNgrams

    @property
    def bucket(self):
        return self.fm.bucket

    @property
    def minn(self):
        return self.fm.minn

    @property
    def maxn(self):
        return self.fm.maxn

    @property
    def t(self):
        return self.fm.t

    @property
    def lr(self):
        return self.fm.lrUpdateRate

    @property
    def lrUpdateRate(self):
        return self.fm.lrUpdateRate

    @property
    def dim(self):
        return self.fm.dim

    @property
    def ws(self):
        return self.fm.ws

    @property
    def epoch(self):
        return self.fm.epoch

    @property
    def neg(self):
        return self.fm.neg

    @property
    def lossName(self):
        return self.fm.lossName

    @property
    def modelName(self):
        return self.fm.modelName

    @property
    def cutoff(self):
        return self.fm.cutoff

    @property
    def retrain(self):
        return self.fm.retrain

    @property
    def qnorm(self):
        return self.fm.qnorm

    @property
    def qout(self):
        return self.fm.qout

    @property
    def dsub(self):
        return self.fm.dsub

    def dict_nlabels(self):
        return self.fm.dictGetNLabels()   

    def dict_get_label(self, i, encoding):
        cdef string cpp_string
        cpp_string = self.fm.dictGetLabel(i)
        return cpp_string.decode(encoding)

    def dict_get_label(self, i, encoding):
        cdef string cpp_string
        cpp_string = self.fm.dictGetLabel(i)
        return cpp_string.decode(encoding)

# Read .bin file that generated by fasttext(1) and import the data
# as the Python object.
# * label_prefix is an optional argument.
#   prefix will be removed from the label name and stored in the model.labels
def load_model(filename, label_prefix='', encoding='utf-8'):
    # Check if the filename is readable
    if not os.path.isfile(filename):
        raise ValueError('fastText: trained model cannot be opened!')

    # Initialize the model first
    model = FastTextWrapper()
    # We convert the python string to C++ string
    filename_bytes = bytes(filename, encoding)
    
    try:
        # Load the model
        model.load_model(filename_bytes)
    except Exception as err:
        raise Exception('fastText: Cannot load ' + filename +
                ' due to ' + str(err))

    print 'DEBUG: model loaded'
    model_name = model.fm.modelName
    if model_name == 'supervised':
        print('DEBUG: fasttext.pyx: supervised model')
        labels = []
        for i in xrange(model.dict_nlabels()):
            label = model.dict_get_label(i, encoding)
            # Remove the prefix
            labels.append(label.replace(label_prefix, ''))
        print('DEBUG: fasttext.pyx: return SupervisedModel')
        return SupervisedModel(model, labels, label_prefix, encoding)
    else:
        raise ValueError('fastText: model name is not valid!')
